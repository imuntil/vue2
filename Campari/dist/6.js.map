{"version":3,"sources":["webpack:///6.js","webpack:///./src/pages/Cart.vue","webpack:///cart-item.vue","webpack:///Cart.vue","webpack:///./~/hammerjs/hammer.js","webpack:///./src/components/cart-item.vue","webpack:///./src/components/cart-item.vue?0f91","webpack:///./src/pages/Cart.vue?cbc7"],"names":["webpackJsonp","299","module","exports","__webpack_require__","Component","321","$","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","_hammerjs","_hammerjs2","_constant","props","cart","type","Array","required","data","editing","editIndex","methods","count","method","item","this","$store","commit","CART_EDIT_COUNT","id","choose","CART_CHOOSE","deleteItem","CART_DELETE_ITEM","onSwipeLeft","console","log","mounted","self","$el","on","e","target","parents","attr","call","328","_interopRequireWildcard","newObj","key","prototype","hasOwnProperty","_cartItem","_cartItem2","_liItem","_liItem2","components","CartItem","LiItem","computed","getters","CART_ALL","allChosen","CART_ALL_CHOSEN","theMoney","CART_THE_MONEY","chooseAll","CART_CHOOSE_ALL","toSettle","$toasted","show","theme","position","duration","$router","push","name","params","from","350","358","362","__WEBPACK_AMD_DEFINE_RESULT__","window","document","exportName","undefined","setTimeoutContext","fn","timeout","context","setTimeout","bindFn","invokeArrayArg","arg","isArray","each","iterator","i","forEach","length","deprecate","message","deprecationMessage","Error","stack","replace","warn","apply","arguments","inherit","child","base","properties","childP","baseP","create","constructor","_super","assign","boolOrFn","val","args","TYPE_FUNCTION","ifUndefined","val1","val2","addEventListeners","types","handler","splitStr","addEventListener","removeEventListeners","removeEventListener","hasParent","node","parent","parentNode","inStr","str","find","indexOf","trim","split","inArray","src","findByKey","toArray","slice","uniqueArray","sort","results","values","a","b","prefixed","property","prefix","prop","camelProp","toUpperCase","VENDOR_PREFIXES","uniqueId","_uniqueId","getWindowForElement","element","doc","ownerDocument","defaultView","parentWindow","Input","manager","callback","options","inputTarget","domHandler","ev","enable","init","createInputInstance","inputClass","SUPPORT_POINTER_EVENTS","PointerEventInput","SUPPORT_ONLY_TOUCH","TouchInput","SUPPORT_TOUCH","TouchMouseInput","MouseInput","inputHandler","eventType","input","pointersLen","pointers","changedPointersLen","changedPointers","isFirst","INPUT_START","isFinal","INPUT_END","INPUT_CANCEL","session","computeInputData","emit","recognize","prevInput","pointersLength","firstInput","simpleCloneInputData","firstMultiple","offsetCenter","center","getCenter","timeStamp","now","deltaTime","angle","getAngle","distance","getDistance","computeDeltaXY","offsetDirection","getDirection","deltaX","deltaY","overallVelocity","getVelocity","overallVelocityX","x","overallVelocityY","y","abs","scale","getScale","rotation","getRotation","maxPointers","computeIntervalInputData","srcEvent","offset","offsetDelta","prevDelta","velocity","velocityX","velocityY","direction","last","lastInterval","COMPUTE_INTERVAL","v","clientX","round","clientY","DIRECTION_NONE","DIRECTION_LEFT","DIRECTION_RIGHT","DIRECTION_UP","DIRECTION_DOWN","p1","p2","PROPS_XY","Math","sqrt","atan2","PI","start","end","PROPS_CLIENT_XY","evEl","MOUSE_ELEMENT_EVENTS","evWin","MOUSE_WINDOW_EVENTS","pressed","POINTER_ELEMENT_EVENTS","POINTER_WINDOW_EVENTS","store","pointerEvents","SingleTouchInput","evTarget","SINGLE_TOUCH_TARGET_EVENTS","SINGLE_TOUCH_WINDOW_EVENTS","started","normalizeSingleTouches","all","touches","changed","changedTouches","concat","TOUCH_TARGET_EVENTS","targetIds","getTouches","allTouches","INPUT_MOVE","identifier","targetTouches","changedTargetTouches","filter","touch","mouse","primaryTouch","lastTouches","recordTouches","eventData","setLastTouch","lastTouch","lts","removeLastTouch","splice","DEDUP_TIMEOUT","isSyntheticEvent","t","dx","dy","DEDUP_DISTANCE","TouchAction","set","cleanTouchActions","actions","TOUCH_ACTION_NONE","hasPanX","TOUCH_ACTION_PAN_X","hasPanY","TOUCH_ACTION_PAN_Y","TOUCH_ACTION_MANIPULATION","TOUCH_ACTION_AUTO","getTouchActionProps","NATIVE_TOUCH_ACTION","touchMap","cssSupports","CSS","supports","Recognizer","defaults","state","STATE_POSSIBLE","simultaneous","requireFail","stateStr","STATE_CANCELLED","STATE_ENDED","STATE_CHANGED","STATE_BEGAN","directionStr","getRecognizerByNameIfManager","otherRecognizer","recognizer","get","AttrRecognizer","PanRecognizer","pX","pY","PinchRecognizer","PressRecognizer","_timer","_input","RotateRecognizer","SwipeRecognizer","TapRecognizer","pTime","pCenter","Hammer","recognizers","preset","Manager","handlers","oldCssProps","touchAction","toggleCssProps","add","recognizeWith","requireFailure","style","cssProps","triggerDomEvent","event","gestureEvent","createEvent","initEvent","gesture","dispatchEvent","TEST_ELEMENT","createElement","Date","TypeError","output","index","source","nextKey","extend","dest","merge","keys","MOBILE_REGEX","test","navigator","userAgent","INPUT_TYPE_TOUCH","INPUT_TYPE_PEN","INPUT_TYPE_MOUSE","INPUT_TYPE_KINECT","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","DIRECTION_ALL","destroy","MOUSE_INPUT_MAP","mousedown","mousemove","mouseup","button","which","pointerType","POINTER_INPUT_MAP","pointerdown","pointermove","pointerup","pointercancel","pointerout","IE10_POINTER_TYPE_ENUM","2","3","4","5","MSPointerEvent","PointerEvent","removePointer","eventTypeNormalized","toLowerCase","isTouch","storeIndex","pointerId","SINGLE_TOUCH_INPUT_MAP","touchstart","touchmove","touchend","touchcancel","TOUCH_INPUT_MAP","inputEvent","inputData","isMouse","sourceCapabilities","firesTouchEvents","PREFIXED_TOUCH_ACTION","TOUCH_ACTION_COMPUTE","TOUCH_ACTION_MAP","compute","update","getTouchAction","join","preventDefaults","prevented","preventDefault","hasNone","isTapPointer","isTapMovement","isTapTouchTime","preventSrc","STATE_RECOGNIZED","STATE_FAILED","dropRecognizeWith","dropRequireFailure","hasRequireFailures","canRecognizeWith","additionalEvent","tryEmit","canEmit","inputDataClone","reset","process","attrTest","optionPointers","isRecognized","isValid","threshold","directionTest","hasMoved","inOut","time","validPointers","validMovement","validTime","clearTimeout","taps","interval","posThreshold","validTouchTime","failTimeout","validInterval","validMultiTap","tapCount","VERSION","domEvents","userSelect","touchSelect","touchCallout","contentZooming","userDrag","tapHighlightColor","FORCED_STOP","stop","force","stopped","curRecognizer","existing","remove","events","off","Tap","Pan","Swipe","Pinch","Rotate","Press","363","377","render","_vm","_h","$createElement","_c","_self","staticClass","attrs","tag","_l","class","href","click","$event","directives","rawName","expression","alt","width","_v","chosen","_s","englishname","proname","procontent","disable","_f","proprice","staticRenderFns","385","mode"],"mappings":"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","file":"6.js","sourcesContent":["webpackJsonp([6],{\n\n/***/ 299:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n/* styles */\n__webpack_require__(358)\n\nvar Component = __webpack_require__(4)(\n  /* script */\n  __webpack_require__(328),\n  /* template */\n  __webpack_require__(385),\n  /* scopeId */\n  \"data-v-dbc56688\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 321:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _hammerjs = __webpack_require__(362);\n\nvar _hammerjs2 = _interopRequireDefault(_hammerjs);\n\nvar _constant = __webpack_require__(11);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n//    import $ from 'jquery'\nexports.default = {\n    props: {\n        cart: {\n            type: Array,\n            required: true\n        }\n    },\n    data: function data() {\n        return {\n            editing: false,\n            editIndex: -1\n        };\n    },\n\n    methods: {\n        count: function count(method, item) {\n            this.$store.commit(_constant.CART_EDIT_COUNT, { method: method, id: item.id });\n        },\n        choose: function choose(item) {\n            this.$store.commit(_constant.CART_CHOOSE, { id: item.id });\n        },\n        deleteItem: function deleteItem(item) {\n            this.$store.commit(_constant.CART_DELETE_ITEM, { id: item.id });\n        },\n        onSwipeLeft: function onSwipeLeft() {\n            console.log('swipe');\n        }\n    },\n    mounted: function mounted() {\n        var self = this;\n        var harmer = new _hammerjs2.default(self.$el, {});\n        harmer.on('swipeleft', function (e) {\n            self.editIndex = $(e.target).parents('.mart-group').attr('index');\n            self.editing = true;\n        }).on('swiperight', function (e) {\n            if (self.editIndex == $(e.target).parents('.mart-group').attr('index') && self.editing) {\n                self.editing = false;\n            }\n        });\n    }\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(65)))\n\n/***/ }),\n\n/***/ 328:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _cartItem = __webpack_require__(363);\n\nvar _cartItem2 = _interopRequireDefault(_cartItem);\n\nvar _liItem = __webpack_require__(66);\n\nvar _liItem2 = _interopRequireDefault(_liItem);\n\nvar _services = __webpack_require__(26);\n\nvar _constant = __webpack_require__(11);\n\nvar type = _interopRequireWildcard(_constant);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexports.default = {\n    components: {\n        CartItem: _cartItem2.default,\n        LiItem: _liItem2.default\n    },\n    computed: {\n        cart: function cart() {\n            return this.$store.getters[type.CART_ALL];\n        },\n        allChosen: function allChosen() {\n            return this.$store.getters[type.CART_ALL_CHOSEN];\n        },\n        theMoney: function theMoney() {\n            return this.$store.getters[type.CART_THE_MONEY];\n        }\n    },\n    methods: {\n        chooseAll: function chooseAll() {\n            this.$store.commit(type.CART_CHOOSE_ALL, !this.allChosen);\n        },\n        toSettle: function toSettle() {\n            if (this.theMoney === 0) {\n                this.$toasted.show('还没有选中商品哦', {\n                    theme: 'outline',\n                    position: 'top-center',\n                    duration: 1000\n                });\n                return;\n            }\n            this.$router.push({ name: 'order', params: { from: 'cart' } });\n        }\n    }\n};\n\n/***/ }),\n\n/***/ 350:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 358:\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n\n/***/ 362:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n        return Hammer;\n    }.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n\n\n/***/ }),\n\n/***/ 363:\n/***/ (function(module, exports, __webpack_require__) {\n\n\n/* styles */\n__webpack_require__(350)\n\nvar Component = __webpack_require__(4)(\n  /* script */\n  __webpack_require__(321),\n  /* template */\n  __webpack_require__(377),\n  /* scopeId */\n  \"data-v-4a359ab8\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 377:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"shopping-cart\"\n  }, [_c('transition-group', {\n    attrs: {\n      \"name\": \"cart\",\n      \"tag\": \"div\"\n    }\n  }, _vm._l((_vm.cart), function(item) {\n    return _c('div', {\n      key: item.id,\n      staticClass: \"mart-group\",\n      class: {\n        editing: _vm.editing && _vm.editIndex == item.id\n      },\n      attrs: {\n        \"index\": item.id\n      }\n    }, [_c('div', {\n      staticClass: \"item\"\n    }, [_c('div', {\n      staticClass: \"choose\"\n    }, [_c('a', {\n      attrs: {\n        \"href\": \"javascript:void(0);\"\n      },\n      on: {\n        \"click\": function($event) {\n          _vm.choose(item)\n        }\n      }\n    }, [_c('img', {\n      directives: [{\n        name: \"show\",\n        rawName: \"v-show\",\n        value: (item.chosen),\n        expression: \"item.chosen\"\n      }],\n      attrs: {\n        \"src\": \"src/img/chosen.png\",\n        \"alt\": \"\",\n        \"width\": \"100%\"\n      }\n    }), _vm._v(\" \"), _c('img', {\n      directives: [{\n        name: \"show\",\n        rawName: \"v-show\",\n        value: (!item.chosen),\n        expression: \"!item.chosen\"\n      }],\n      attrs: {\n        \"src\": \"src/img/not-choose.png\",\n        \"alt\": \"\",\n        \"width\": \"100%\"\n      }\n    })])]), _vm._v(\" \"), _c('div', {\n      staticClass: \"img\"\n    }, [_c('img', {\n      attrs: {\n        \"src\": \"src/img/home-sellings-1.jpg\",\n        \"alt\": \"\",\n        \"width\": \"100%\"\n      }\n    })]), _vm._v(\" \"), _c('div', {\n      staticClass: \"infos\"\n    }, [_c('p', [_vm._v(_vm._s(item.englishname))]), _vm._v(\" \"), _c('p', [_vm._v(_vm._s(item.proname))]), _vm._v(\" \"), _c('p', {\n      staticClass: \"spe\"\n    }, [_vm._v(_vm._s(item.procontent) + \"ml\")]), _vm._v(\" \"), _c('div', {\n      staticClass: \"group\"\n    }, [_c('a', {\n      class: {\n        disable: item.count == 1\n      },\n      attrs: {\n        \"href\": \"javascript:void(0);\"\n      },\n      on: {\n        \"click\": function($event) {\n          _vm.count('-', item)\n        }\n      }\n    }, [_vm._v(\"\\n                            －\\n                        \")]), _vm._v(\" \"), _c('span', [_vm._v(_vm._s(item.count))]), _vm._v(\" \"), _c('a', {\n      attrs: {\n        \"href\": \"javascript:void(0);\"\n      },\n      on: {\n        \"click\": function($event) {\n          _vm.count('+', item)\n        }\n      }\n    }, [_vm._v(\"\\n                            ＋\\n                        \")])])]), _vm._v(\" \"), _c('div', {\n      staticClass: \"price\"\n    }, [_vm._v(\"\\n                    \" + _vm._s(_vm._f(\"currency\")(item.proprice * item.count, '￥', 0)) + \"\\n                \")])]), _vm._v(\" \"), _c('a', {\n      staticClass: \"delete\",\n      attrs: {\n        \"href\": \"javascript:void(0);\"\n      },\n      on: {\n        \"click\": function($event) {\n          _vm.deleteItem(item)\n        }\n      }\n    }, [_vm._v(\"删除\")])])\n  }))], 1)\n},staticRenderFns: []}\n\n/***/ }),\n\n/***/ 385:\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"wrapper\"\n  }, [_c('div', {\n    staticClass: \"out-container\"\n  }, [_c('div', {\n    staticClass: \"main-container cart-page\"\n  }, [_c('transition', {\n    attrs: {\n      \"name\": \"cart-turn\",\n      \"mode\": \"out-in\"\n    }\n  }, [(_vm.cart.length) ? _c('cart-item', {\n    key: \"full\",\n    attrs: {\n      \"cart\": _vm.cart\n    }\n  }) : _c('div', {\n    key: \"empty\",\n    staticClass: \"empty-cart\"\n  }, [_c('div', [_c('img', {\n    attrs: {\n      \"src\": \"src/img/empty-cart.jpg\",\n      \"alt\": \"\"\n    }\n  })])])], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"like\"\n  }, [_c('h3', {\n    staticClass: \"with-after\"\n  }, [_vm._v(\"猜你喜欢\")]), _vm._v(\" \"), _c('ul', [_c('li-item', {\n    attrs: {\n      \"item\": {}\n    }\n  }), _vm._v(\" \"), _c('li-item', {\n    attrs: {\n      \"item\": {}\n    }\n  }), _vm._v(\" \"), _c('li-item', {\n    attrs: {\n      \"item\": {}\n    }\n  }), _vm._v(\" \"), _c('li-item', {\n    attrs: {\n      \"item\": {}\n    }\n  })], 1)]), _vm._v(\" \"), _c('div', {\n    staticClass: \"foot-bar\"\n  }, [_c('a', {\n    staticClass: \"choose-all\",\n    attrs: {\n      \"href\": \"javascript:void(0);\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.chooseAll()\n      }\n    }\n  }, [_c('img', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.allChosen),\n      expression: \"allChosen\"\n    }],\n    attrs: {\n      \"src\": \"src/img/chosen.png\",\n      \"alt\": \"\"\n    }\n  }), _vm._v(\" \"), _c('img', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (!_vm.allChosen),\n      expression: \"!allChosen\"\n    }],\n    attrs: {\n      \"src\": \"src/img/not-choose.png\",\n      \"alt\": \"\"\n    }\n  }), _vm._v(\"\\n                    全选\\n                \")]), _vm._v(\" \"), _c('div', [_c('span', [_vm._v(\"合计：￥\" + _vm._s(_vm.theMoney))]), _vm._v(\" \"), _c('a', {\n    attrs: {\n      \"href\": \"javascript:;\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.toSettle()\n      }\n    }\n  }, [_vm._v(\"去结算\")])])])], 1)])])\n},staticRenderFns: []}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// 6.js","\n/* styles */\nrequire(\"!!../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader!../../node_modules/vue-loader/lib/style-rewriter?{\\\"id\\\":\\\"data-v-dbc56688\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!sass-loader!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./Cart.vue\")\n\nvar Component = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Cart.vue\"),\n  /* template */\n  require(\"!!../../node_modules/vue-loader/lib/template-compiler?{\\\"id\\\":\\\"data-v-dbc56688\\\"}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./Cart.vue\"),\n  /* scopeId */\n  \"data-v-dbc56688\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/Cart.vue\n// module id = 299\n// module chunks = 6","<template>\r\n    <div class=\"shopping-cart\">\r\n        <transition-group name=\"cart\" tag=\"div\">\r\n            <div class=\"mart-group\"\r\n                 v-for=\"item in cart\"\r\n                 :key=\"item.id\"\r\n                 :index = \"item.id\"\r\n                 :class=\"{editing: editing && editIndex == item.id}\">\r\n                <div class=\"item\" >\r\n                    <div class=\"choose\">\r\n                        <a @click=\"choose(item)\" href=\"javascript:void(0);\">\r\n                            <img v-show=\"item.chosen\" src=\"src/img/chosen.png\" alt=\"\" width=\"100%\">\r\n                            <img v-show=\"!item.chosen\" src=\"src/img/not-choose.png\" alt=\"\" width=\"100%\">\r\n                        </a>\r\n                    </div>\r\n                    <div class=\"img\">\r\n                        <img src=\"src/img/home-sellings-1.jpg\" alt=\"\" width=\"100%\">\r\n                    </div>\r\n                    <div class=\"infos\">\r\n                        <p>{{item.englishname}}</p>\r\n                        <p>{{item.proname}}</p>\r\n                        <p class=\"spe\">{{item.procontent}}ml</p>\r\n                        <div class=\"group\">\r\n                            <a href=\"javascript:void(0);\"\r\n                               :class=\"{disable:item.count == 1}\"\r\n                               @click=\"count('-', item)\">\r\n                                －\r\n                            </a>\r\n                            <span>{{item.count}}</span>\r\n                            <a @click=\"count('+', item)\" href=\"javascript:void(0);\">\r\n                                ＋\r\n                            </a>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"price\">\r\n                        {{item.proprice * item.count | currency('￥', 0)}}\r\n                    </div>\r\n                </div>\r\n                <a href=\"javascript:void(0);\"\r\n                   @click=\"deleteItem(item)\"\r\n                   class=\"delete\">删除</a>\r\n            </div>\r\n        </transition-group>\r\n    </div>\r\n</template>\r\n<script>\r\n//    import $ from 'jquery'\r\n    import Hammer from 'hammerjs'\r\n    import {CART_EDIT_COUNT, CART_CHOOSE, CART_DELETE_ITEM} from '../javascripts/constant'\r\n    export default {\r\n        props:{\r\n            cart:{\r\n                type:Array,\r\n                required:true\r\n            }\r\n        },\r\n        data() {\r\n            return {\r\n                editing:false,\r\n                editIndex:-1\r\n            }\r\n        },\r\n        methods:{\r\n            count(method, item) {\r\n                this.$store.commit(CART_EDIT_COUNT, {method:method, id:item.id})\r\n            },\r\n            choose(item) {\r\n                this.$store.commit(CART_CHOOSE, {id:item.id})\r\n            },\r\n            deleteItem(item) {\r\n                this.$store.commit(CART_DELETE_ITEM, {id:item.id})\r\n            },\r\n            onSwipeLeft() {\r\n                console.log('swipe');\r\n            }\r\n        },\r\n        mounted() {\r\n            let self = this;\r\n            let harmer = new Hammer(self.$el, {});\r\n            harmer.on('swipeleft', function (e) {\r\n                self.editIndex = $(e.target).parents('.mart-group').attr('index');\r\n                self.editing = true;\r\n\r\n            }).on('swiperight', function (e) {\r\n                if (self.editIndex == $(e.target).parents('.mart-group').attr('index')\r\n                    && self.editing ) {\r\n                    self.editing = false;\r\n                }\r\n            })\r\n        }\r\n    }\r\n</script>\r\n<style lang=\"scss\" rel=\"stylesheet/scss\" scoped>\r\n    @import \"../stylesheets/common\";\r\n    .shopping-cart {\r\n        width:100%;\r\n        overflow: hidden;\r\n        display: flex;\r\n        background-color: $f6-bg-color;\r\n        flex-direction:column;\r\n        min-height:150px;\r\n\r\n        //display: none;\r\n        .mart-group {\r\n            position: relative;\r\n            margin-bottom:10px;\r\n            background-color: #ffffff;\r\n            width:130%;\r\n            display: flex;\r\n            transform:translateX(0);\r\n            transition: all .3s;\r\n            .delete {\r\n                display: flex;\r\n                align-items: center;\r\n                justify-content: center;\r\n                background: $home-red-color;\r\n                color: #fff;\r\n                font-size: $font-size + 0.1rem;\r\n                flex:auto;\r\n            }\r\n            &.editing {\r\n                transform:translateX(-23%)\r\n            }\r\n        }\r\n        .cart-enter, .cart-leave-active {\r\n            opacity:0;\r\n            transform: scale(0, 0);\r\n        }\r\n        .cart-leave-active {\r\n            position: absolute;\r\n        }\r\n        /*.cart-move {*/\r\n            /*transition: all 1s;*/\r\n        /*}*/\r\n\r\n        .item {\r\n            box-sizing: border-box;\r\n            display: flex;\r\n            padding:12px;\r\n            flex-direction:row;\r\n            justify-content:space-between;\r\n            background-color: #ffffff;\r\n            border-bottom:1px solid $home-border;\r\n            flex:1 1 63%;\r\n        }\r\n        .img {\r\n            display: flex;\r\n            flex: 0 0 30%;\r\n            padding: 5px;\r\n            box-sizing: border-box;\r\n            align-items: center;\r\n        }\r\n        .infos {\r\n            flex: 0 0 40%;\r\n            display: flex;\r\n            padding: 5px 0;\r\n            box-sizing: border-box;\r\n            flex-direction: column;\r\n            justify-content: space-between;\r\n            font-size: 0.9rem;\r\n            font:{\r\n                size:$font-size;\r\n                //weight:600;\r\n            }\r\n            .spe {\r\n                margin-top:6px;\r\n                margin-bottom:4px;\r\n            }\r\n            .group {\r\n                flex:1 1 40%;\r\n                display: flex;\r\n                flex-direction:row;\r\n                align-items:center;\r\n                a{\r\n                    border:1px solid $home-border;\r\n                    padding:5px 8px;\r\n                    color: #000;\r\n                    text-align: center;\r\n                }\r\n                a.disable {\r\n                    color: $gray-price-color;\r\n                }\r\n                span {\r\n                    margin:0 15px;\r\n                    display: flex;\r\n                    flex: 0 0 14%;\r\n                    justify-content: center;\r\n                }\r\n            }\r\n        }\r\n        .price {\r\n            flex: 0 0 15%;\r\n            display: flex;\r\n            align-items: center;\r\n            color: $home-red-color;\r\n            font-size: .9rem;\r\n        }\r\n        .choose {\r\n            display: flex;\r\n            align-items: center;\r\n            justify-content: center;\r\n            flex: 0 0 8%;\r\n            a {\r\n                width:80%;\r\n                padding:10%;\r\n            }\r\n        }\r\n    }\r\n</style>\n\n\n// WEBPACK FOOTER //\n// cart-item.vue?6bf6004e","<template>\r\n    <div class=\"wrapper\">\r\n        <div class=\"out-container\">\r\n            <div class=\"main-container cart-page\">\r\n                <transition name=\"cart-turn\" mode=\"out-in\">\r\n                    <cart-item key=\"full\" v-if=\"cart.length\" :cart=\"cart\"></cart-item>\r\n                    <div v-else key=\"empty\" class=\"empty-cart\">\r\n                        <div>\r\n                            <img src=\"src/img/empty-cart.jpg\" alt=\"\">\r\n                        </div>\r\n                    </div>\r\n                </transition>\r\n                <div class=\"like\">\r\n                    <h3 class=\"with-after\">猜你喜欢</h3>\r\n                    <ul>\r\n                        <li-item :item=\"{}\"></li-item>\r\n                        <li-item :item=\"{}\"></li-item>\r\n                        <li-item :item=\"{}\"></li-item>\r\n                        <li-item :item=\"{}\"></li-item>\r\n                    </ul>\r\n                </div>\r\n                <div class=\"foot-bar\">\r\n                    <a href=\"javascript:void(0);\"\r\n                       @click=\"chooseAll()\"\r\n                       class=\"choose-all\">\r\n                        <img v-show=\"allChosen\" src=\"src/img/chosen.png\" alt=\"\">\r\n                        <img v-show=\"!allChosen\" src=\"src/img/not-choose.png\" alt=\"\">\r\n                        全选\r\n                    </a>\r\n                    <div>\r\n                        <span>合计：￥{{theMoney}}</span>\r\n                        <a href=\"javascript:;\" @click=\"toSettle()\">去结算</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n<script>\r\n    import CartItem from '../components/cart-item.vue'\r\n    import LiItem from '../components/li-item.vue'\r\n    import {cart} from '../javascripts/services'\r\n    import * as type from '../javascripts/constant'\r\n\r\n    export default {\r\n        components:{\r\n            CartItem,\r\n            LiItem\r\n        },\r\n        computed:{\r\n            cart() {\r\n                return this.$store.getters[type.CART_ALL];\r\n            },\r\n            allChosen() {\r\n                return this.$store.getters[type.CART_ALL_CHOSEN];\r\n            },\r\n            theMoney() {\r\n                return this.$store.getters[type.CART_THE_MONEY];\r\n            }\r\n        },\r\n        methods:{\r\n            chooseAll() {\r\n                this.$store.commit(type.CART_CHOOSE_ALL, !this.allChosen);\r\n            },\r\n            toSettle() {\r\n                if (this.theMoney === 0) {\r\n                    this.$toasted.show('还没有选中商品哦', {\r\n                        theme:'outline',\r\n                        position:'top-center',\r\n                        duration:1000\r\n                    });\r\n                    return;\r\n                }\r\n                this.$router.push({name:'order', params:{from:'cart'}});\r\n            }\r\n        }\r\n    }\r\n</script>\r\n<style lang=\"scss\" rel=\"stylesheet/scss\" scoped>\r\n    @import \"../stylesheets/common\";\r\n    .cart-page {\r\n        position: relative;\r\n        width:100%;\r\n        display: block;\r\n        overflow-y: scroll;\r\n        overflow-x: hidden;\r\n        .empty-cart {\r\n            width:100%;\r\n            display: block;\r\n            background-color: $f6-bg-color;\r\n            padding-bottom:12px;\r\n            div {\r\n                background-color: #fff;\r\n                border-bottom:1px solid $home-border;\r\n                padding:20%;\r\n            }\r\n            img {\r\n                width:50%;\r\n                margin:0 auto;\r\n            }\r\n        }\r\n        .like {\r\n            width:90%;\r\n            margin:0 auto;\r\n            padding-bottom:$tabbar-height + 15px;\r\n            ul {\r\n                @include homeUl;\r\n                margin-top: 15px;\r\n            }\r\n        }\r\n        .foot-bar {\r\n            position: fixed;\r\n            bottom:0;\r\n            left:0;\r\n            width:100%;\r\n            height:$tabbar-height;\r\n            background-color: #ffffff;\r\n            overflow: hidden;\r\n            border-top:1px solid $home-border;\r\n            display: flex;\r\n            flex-direction:row;\r\n            padding:0 5%;\r\n            box-sizing: border-box;\r\n            flex-basis:100%;\r\n            .choose-all {\r\n                display: flex;\r\n                flex: 0 0 auto;\r\n                padding: 0 2%;\r\n                align-items: center;\r\n                color: #000;\r\n                font-size: $font-size;\r\n                img {\r\n                    height:20px;\r\n                    width:20px;\r\n                    margin-right:10px;\r\n                }\r\n            }\r\n            div {\r\n                display: flex;\r\n                flex:auto;\r\n                align-items:center;\r\n                justify-content:flex-end;\r\n                font-size: $font-size;\r\n                span {\r\n                    color: $home-red-color;\r\n                }\r\n                a {\r\n                    margin-left:5%;\r\n                    padding:8px 8%;\r\n                    background-color: $red-btn-color;\r\n                    color: #ffffff;\r\n                    font-size: $font-size;\r\n                    border-radius: 3px;\r\n                    flex:0 0 auto;\r\n                    white-space:nowrap;\r\n                }\r\n            }\r\n        }\r\n\r\n        .cart-turn-enter-active, cart-turn-leave-active {\r\n            transition: opacity 1s;\r\n        }\r\n        .cart-turn-enter, .cart-turn-leave {\r\n            opacity:0;\r\n        }\r\n    }\r\n</style>\n\n\n// WEBPACK FOOTER //\n// Cart.vue?486e4dd5","/*! Hammer.JS - v2.0.7 - 2016-04-22\n * http://hammerjs.github.io/\n *\n * Copyright (c) 2016 Jorik Tangelder;\n * Licensed under the MIT license */\n(function(window, document, exportName, undefined) {\n  'use strict';\n\nvar VENDOR_PREFIXES = ['', 'webkit', 'Moz', 'MS', 'ms', 'o'];\nvar TEST_ELEMENT = document.createElement('div');\n\nvar TYPE_FUNCTION = 'function';\n\nvar round = Math.round;\nvar abs = Math.abs;\nvar now = Date.now;\n\n/**\n * set a timeout with a given scope\n * @param {Function} fn\n * @param {Number} timeout\n * @param {Object} context\n * @returns {number}\n */\nfunction setTimeoutContext(fn, timeout, context) {\n    return setTimeout(bindFn(fn, context), timeout);\n}\n\n/**\n * if the argument is an array, we want to execute the fn on each entry\n * if it aint an array we don't want to do a thing.\n * this is used by all the methods that accept a single and array argument.\n * @param {*|Array} arg\n * @param {String} fn\n * @param {Object} [context]\n * @returns {Boolean}\n */\nfunction invokeArrayArg(arg, fn, context) {\n    if (Array.isArray(arg)) {\n        each(arg, context[fn], context);\n        return true;\n    }\n    return false;\n}\n\n/**\n * walk objects and arrays\n * @param {Object} obj\n * @param {Function} iterator\n * @param {Object} context\n */\nfunction each(obj, iterator, context) {\n    var i;\n\n    if (!obj) {\n        return;\n    }\n\n    if (obj.forEach) {\n        obj.forEach(iterator, context);\n    } else if (obj.length !== undefined) {\n        i = 0;\n        while (i < obj.length) {\n            iterator.call(context, obj[i], i, obj);\n            i++;\n        }\n    } else {\n        for (i in obj) {\n            obj.hasOwnProperty(i) && iterator.call(context, obj[i], i, obj);\n        }\n    }\n}\n\n/**\n * wrap a method with a deprecation warning and stack trace\n * @param {Function} method\n * @param {String} name\n * @param {String} message\n * @returns {Function} A new function wrapping the supplied method.\n */\nfunction deprecate(method, name, message) {\n    var deprecationMessage = 'DEPRECATED METHOD: ' + name + '\\n' + message + ' AT \\n';\n    return function() {\n        var e = new Error('get-stack-trace');\n        var stack = e && e.stack ? e.stack.replace(/^[^\\(]+?[\\n$]/gm, '')\n            .replace(/^\\s+at\\s+/gm, '')\n            .replace(/^Object.<anonymous>\\s*\\(/gm, '{anonymous}()@') : 'Unknown Stack Trace';\n\n        var log = window.console && (window.console.warn || window.console.log);\n        if (log) {\n            log.call(window.console, deprecationMessage, stack);\n        }\n        return method.apply(this, arguments);\n    };\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} target\n * @param {...Object} objects_to_assign\n * @returns {Object} target\n */\nvar assign;\nif (typeof Object.assign !== 'function') {\n    assign = function assign(target) {\n        if (target === undefined || target === null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var output = Object(target);\n        for (var index = 1; index < arguments.length; index++) {\n            var source = arguments[index];\n            if (source !== undefined && source !== null) {\n                for (var nextKey in source) {\n                    if (source.hasOwnProperty(nextKey)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n        }\n        return output;\n    };\n} else {\n    assign = Object.assign;\n}\n\n/**\n * extend object.\n * means that properties in dest will be overwritten by the ones in src.\n * @param {Object} dest\n * @param {Object} src\n * @param {Boolean} [merge=false]\n * @returns {Object} dest\n */\nvar extend = deprecate(function extend(dest, src, merge) {\n    var keys = Object.keys(src);\n    var i = 0;\n    while (i < keys.length) {\n        if (!merge || (merge && dest[keys[i]] === undefined)) {\n            dest[keys[i]] = src[keys[i]];\n        }\n        i++;\n    }\n    return dest;\n}, 'extend', 'Use `assign`.');\n\n/**\n * merge the values from src in the dest.\n * means that properties that exist in dest will not be overwritten by src\n * @param {Object} dest\n * @param {Object} src\n * @returns {Object} dest\n */\nvar merge = deprecate(function merge(dest, src) {\n    return extend(dest, src, true);\n}, 'merge', 'Use `assign`.');\n\n/**\n * simple class inheritance\n * @param {Function} child\n * @param {Function} base\n * @param {Object} [properties]\n */\nfunction inherit(child, base, properties) {\n    var baseP = base.prototype,\n        childP;\n\n    childP = child.prototype = Object.create(baseP);\n    childP.constructor = child;\n    childP._super = baseP;\n\n    if (properties) {\n        assign(childP, properties);\n    }\n}\n\n/**\n * simple function bind\n * @param {Function} fn\n * @param {Object} context\n * @returns {Function}\n */\nfunction bindFn(fn, context) {\n    return function boundFn() {\n        return fn.apply(context, arguments);\n    };\n}\n\n/**\n * let a boolean value also be a function that must return a boolean\n * this first item in args will be used as the context\n * @param {Boolean|Function} val\n * @param {Array} [args]\n * @returns {Boolean}\n */\nfunction boolOrFn(val, args) {\n    if (typeof val == TYPE_FUNCTION) {\n        return val.apply(args ? args[0] || undefined : undefined, args);\n    }\n    return val;\n}\n\n/**\n * use the val2 when val1 is undefined\n * @param {*} val1\n * @param {*} val2\n * @returns {*}\n */\nfunction ifUndefined(val1, val2) {\n    return (val1 === undefined) ? val2 : val1;\n}\n\n/**\n * addEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction addEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.addEventListener(type, handler, false);\n    });\n}\n\n/**\n * removeEventListener with multiple events at once\n * @param {EventTarget} target\n * @param {String} types\n * @param {Function} handler\n */\nfunction removeEventListeners(target, types, handler) {\n    each(splitStr(types), function(type) {\n        target.removeEventListener(type, handler, false);\n    });\n}\n\n/**\n * find if a node is in the given parent\n * @method hasParent\n * @param {HTMLElement} node\n * @param {HTMLElement} parent\n * @return {Boolean} found\n */\nfunction hasParent(node, parent) {\n    while (node) {\n        if (node == parent) {\n            return true;\n        }\n        node = node.parentNode;\n    }\n    return false;\n}\n\n/**\n * small indexOf wrapper\n * @param {String} str\n * @param {String} find\n * @returns {Boolean} found\n */\nfunction inStr(str, find) {\n    return str.indexOf(find) > -1;\n}\n\n/**\n * split string on whitespace\n * @param {String} str\n * @returns {Array} words\n */\nfunction splitStr(str) {\n    return str.trim().split(/\\s+/g);\n}\n\n/**\n * find if a array contains the object using indexOf or a simple polyFill\n * @param {Array} src\n * @param {String} find\n * @param {String} [findByKey]\n * @return {Boolean|Number} false when not found, or the index\n */\nfunction inArray(src, find, findByKey) {\n    if (src.indexOf && !findByKey) {\n        return src.indexOf(find);\n    } else {\n        var i = 0;\n        while (i < src.length) {\n            if ((findByKey && src[i][findByKey] == find) || (!findByKey && src[i] === find)) {\n                return i;\n            }\n            i++;\n        }\n        return -1;\n    }\n}\n\n/**\n * convert array-like objects to real arrays\n * @param {Object} obj\n * @returns {Array}\n */\nfunction toArray(obj) {\n    return Array.prototype.slice.call(obj, 0);\n}\n\n/**\n * unique array with objects based on a key (like 'id') or just by the array's value\n * @param {Array} src [{id:1},{id:2},{id:1}]\n * @param {String} [key]\n * @param {Boolean} [sort=False]\n * @returns {Array} [{id:1},{id:2}]\n */\nfunction uniqueArray(src, key, sort) {\n    var results = [];\n    var values = [];\n    var i = 0;\n\n    while (i < src.length) {\n        var val = key ? src[i][key] : src[i];\n        if (inArray(values, val) < 0) {\n            results.push(src[i]);\n        }\n        values[i] = val;\n        i++;\n    }\n\n    if (sort) {\n        if (!key) {\n            results = results.sort();\n        } else {\n            results = results.sort(function sortUniqueArray(a, b) {\n                return a[key] > b[key];\n            });\n        }\n    }\n\n    return results;\n}\n\n/**\n * get the prefixed property\n * @param {Object} obj\n * @param {String} property\n * @returns {String|Undefined} prefixed\n */\nfunction prefixed(obj, property) {\n    var prefix, prop;\n    var camelProp = property[0].toUpperCase() + property.slice(1);\n\n    var i = 0;\n    while (i < VENDOR_PREFIXES.length) {\n        prefix = VENDOR_PREFIXES[i];\n        prop = (prefix) ? prefix + camelProp : property;\n\n        if (prop in obj) {\n            return prop;\n        }\n        i++;\n    }\n    return undefined;\n}\n\n/**\n * get a unique id\n * @returns {number} uniqueId\n */\nvar _uniqueId = 1;\nfunction uniqueId() {\n    return _uniqueId++;\n}\n\n/**\n * get the window object of an element\n * @param {HTMLElement} element\n * @returns {DocumentView|Window}\n */\nfunction getWindowForElement(element) {\n    var doc = element.ownerDocument || element;\n    return (doc.defaultView || doc.parentWindow || window);\n}\n\nvar MOBILE_REGEX = /mobile|tablet|ip(ad|hone|od)|android/i;\n\nvar SUPPORT_TOUCH = ('ontouchstart' in window);\nvar SUPPORT_POINTER_EVENTS = prefixed(window, 'PointerEvent') !== undefined;\nvar SUPPORT_ONLY_TOUCH = SUPPORT_TOUCH && MOBILE_REGEX.test(navigator.userAgent);\n\nvar INPUT_TYPE_TOUCH = 'touch';\nvar INPUT_TYPE_PEN = 'pen';\nvar INPUT_TYPE_MOUSE = 'mouse';\nvar INPUT_TYPE_KINECT = 'kinect';\n\nvar COMPUTE_INTERVAL = 25;\n\nvar INPUT_START = 1;\nvar INPUT_MOVE = 2;\nvar INPUT_END = 4;\nvar INPUT_CANCEL = 8;\n\nvar DIRECTION_NONE = 1;\nvar DIRECTION_LEFT = 2;\nvar DIRECTION_RIGHT = 4;\nvar DIRECTION_UP = 8;\nvar DIRECTION_DOWN = 16;\n\nvar DIRECTION_HORIZONTAL = DIRECTION_LEFT | DIRECTION_RIGHT;\nvar DIRECTION_VERTICAL = DIRECTION_UP | DIRECTION_DOWN;\nvar DIRECTION_ALL = DIRECTION_HORIZONTAL | DIRECTION_VERTICAL;\n\nvar PROPS_XY = ['x', 'y'];\nvar PROPS_CLIENT_XY = ['clientX', 'clientY'];\n\n/**\n * create new input type manager\n * @param {Manager} manager\n * @param {Function} callback\n * @returns {Input}\n * @constructor\n */\nfunction Input(manager, callback) {\n    var self = this;\n    this.manager = manager;\n    this.callback = callback;\n    this.element = manager.element;\n    this.target = manager.options.inputTarget;\n\n    // smaller wrapper around the handler, for the scope and the enabled state of the manager,\n    // so when disabled the input events are completely bypassed.\n    this.domHandler = function(ev) {\n        if (boolOrFn(manager.options.enable, [manager])) {\n            self.handler(ev);\n        }\n    };\n\n    this.init();\n\n}\n\nInput.prototype = {\n    /**\n     * should handle the inputEvent data and trigger the callback\n     * @virtual\n     */\n    handler: function() { },\n\n    /**\n     * bind the events\n     */\n    init: function() {\n        this.evEl && addEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && addEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && addEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    },\n\n    /**\n     * unbind the events\n     */\n    destroy: function() {\n        this.evEl && removeEventListeners(this.element, this.evEl, this.domHandler);\n        this.evTarget && removeEventListeners(this.target, this.evTarget, this.domHandler);\n        this.evWin && removeEventListeners(getWindowForElement(this.element), this.evWin, this.domHandler);\n    }\n};\n\n/**\n * create new input type manager\n * called by the Manager constructor\n * @param {Hammer} manager\n * @returns {Input}\n */\nfunction createInputInstance(manager) {\n    var Type;\n    var inputClass = manager.options.inputClass;\n\n    if (inputClass) {\n        Type = inputClass;\n    } else if (SUPPORT_POINTER_EVENTS) {\n        Type = PointerEventInput;\n    } else if (SUPPORT_ONLY_TOUCH) {\n        Type = TouchInput;\n    } else if (!SUPPORT_TOUCH) {\n        Type = MouseInput;\n    } else {\n        Type = TouchMouseInput;\n    }\n    return new (Type)(manager, inputHandler);\n}\n\n/**\n * handle input events\n * @param {Manager} manager\n * @param {String} eventType\n * @param {Object} input\n */\nfunction inputHandler(manager, eventType, input) {\n    var pointersLen = input.pointers.length;\n    var changedPointersLen = input.changedPointers.length;\n    var isFirst = (eventType & INPUT_START && (pointersLen - changedPointersLen === 0));\n    var isFinal = (eventType & (INPUT_END | INPUT_CANCEL) && (pointersLen - changedPointersLen === 0));\n\n    input.isFirst = !!isFirst;\n    input.isFinal = !!isFinal;\n\n    if (isFirst) {\n        manager.session = {};\n    }\n\n    // source event is the normalized value of the domEvents\n    // like 'touchstart, mouseup, pointerdown'\n    input.eventType = eventType;\n\n    // compute scale, rotation etc\n    computeInputData(manager, input);\n\n    // emit secret event\n    manager.emit('hammer.input', input);\n\n    manager.recognize(input);\n    manager.session.prevInput = input;\n}\n\n/**\n * extend the data with some usable properties like scale, rotate, velocity etc\n * @param {Object} manager\n * @param {Object} input\n */\nfunction computeInputData(manager, input) {\n    var session = manager.session;\n    var pointers = input.pointers;\n    var pointersLength = pointers.length;\n\n    // store the first input to calculate the distance and direction\n    if (!session.firstInput) {\n        session.firstInput = simpleCloneInputData(input);\n    }\n\n    // to compute scale and rotation we need to store the multiple touches\n    if (pointersLength > 1 && !session.firstMultiple) {\n        session.firstMultiple = simpleCloneInputData(input);\n    } else if (pointersLength === 1) {\n        session.firstMultiple = false;\n    }\n\n    var firstInput = session.firstInput;\n    var firstMultiple = session.firstMultiple;\n    var offsetCenter = firstMultiple ? firstMultiple.center : firstInput.center;\n\n    var center = input.center = getCenter(pointers);\n    input.timeStamp = now();\n    input.deltaTime = input.timeStamp - firstInput.timeStamp;\n\n    input.angle = getAngle(offsetCenter, center);\n    input.distance = getDistance(offsetCenter, center);\n\n    computeDeltaXY(session, input);\n    input.offsetDirection = getDirection(input.deltaX, input.deltaY);\n\n    var overallVelocity = getVelocity(input.deltaTime, input.deltaX, input.deltaY);\n    input.overallVelocityX = overallVelocity.x;\n    input.overallVelocityY = overallVelocity.y;\n    input.overallVelocity = (abs(overallVelocity.x) > abs(overallVelocity.y)) ? overallVelocity.x : overallVelocity.y;\n\n    input.scale = firstMultiple ? getScale(firstMultiple.pointers, pointers) : 1;\n    input.rotation = firstMultiple ? getRotation(firstMultiple.pointers, pointers) : 0;\n\n    input.maxPointers = !session.prevInput ? input.pointers.length : ((input.pointers.length >\n        session.prevInput.maxPointers) ? input.pointers.length : session.prevInput.maxPointers);\n\n    computeIntervalInputData(session, input);\n\n    // find the correct target\n    var target = manager.element;\n    if (hasParent(input.srcEvent.target, target)) {\n        target = input.srcEvent.target;\n    }\n    input.target = target;\n}\n\nfunction computeDeltaXY(session, input) {\n    var center = input.center;\n    var offset = session.offsetDelta || {};\n    var prevDelta = session.prevDelta || {};\n    var prevInput = session.prevInput || {};\n\n    if (input.eventType === INPUT_START || prevInput.eventType === INPUT_END) {\n        prevDelta = session.prevDelta = {\n            x: prevInput.deltaX || 0,\n            y: prevInput.deltaY || 0\n        };\n\n        offset = session.offsetDelta = {\n            x: center.x,\n            y: center.y\n        };\n    }\n\n    input.deltaX = prevDelta.x + (center.x - offset.x);\n    input.deltaY = prevDelta.y + (center.y - offset.y);\n}\n\n/**\n * velocity is calculated every x ms\n * @param {Object} session\n * @param {Object} input\n */\nfunction computeIntervalInputData(session, input) {\n    var last = session.lastInterval || input,\n        deltaTime = input.timeStamp - last.timeStamp,\n        velocity, velocityX, velocityY, direction;\n\n    if (input.eventType != INPUT_CANCEL && (deltaTime > COMPUTE_INTERVAL || last.velocity === undefined)) {\n        var deltaX = input.deltaX - last.deltaX;\n        var deltaY = input.deltaY - last.deltaY;\n\n        var v = getVelocity(deltaTime, deltaX, deltaY);\n        velocityX = v.x;\n        velocityY = v.y;\n        velocity = (abs(v.x) > abs(v.y)) ? v.x : v.y;\n        direction = getDirection(deltaX, deltaY);\n\n        session.lastInterval = input;\n    } else {\n        // use latest velocity info if it doesn't overtake a minimum period\n        velocity = last.velocity;\n        velocityX = last.velocityX;\n        velocityY = last.velocityY;\n        direction = last.direction;\n    }\n\n    input.velocity = velocity;\n    input.velocityX = velocityX;\n    input.velocityY = velocityY;\n    input.direction = direction;\n}\n\n/**\n * create a simple clone from the input used for storage of firstInput and firstMultiple\n * @param {Object} input\n * @returns {Object} clonedInputData\n */\nfunction simpleCloneInputData(input) {\n    // make a simple copy of the pointers because we will get a reference if we don't\n    // we only need clientXY for the calculations\n    var pointers = [];\n    var i = 0;\n    while (i < input.pointers.length) {\n        pointers[i] = {\n            clientX: round(input.pointers[i].clientX),\n            clientY: round(input.pointers[i].clientY)\n        };\n        i++;\n    }\n\n    return {\n        timeStamp: now(),\n        pointers: pointers,\n        center: getCenter(pointers),\n        deltaX: input.deltaX,\n        deltaY: input.deltaY\n    };\n}\n\n/**\n * get the center of all the pointers\n * @param {Array} pointers\n * @return {Object} center contains `x` and `y` properties\n */\nfunction getCenter(pointers) {\n    var pointersLength = pointers.length;\n\n    // no need to loop when only one touch\n    if (pointersLength === 1) {\n        return {\n            x: round(pointers[0].clientX),\n            y: round(pointers[0].clientY)\n        };\n    }\n\n    var x = 0, y = 0, i = 0;\n    while (i < pointersLength) {\n        x += pointers[i].clientX;\n        y += pointers[i].clientY;\n        i++;\n    }\n\n    return {\n        x: round(x / pointersLength),\n        y: round(y / pointersLength)\n    };\n}\n\n/**\n * calculate the velocity between two points. unit is in px per ms.\n * @param {Number} deltaTime\n * @param {Number} x\n * @param {Number} y\n * @return {Object} velocity `x` and `y`\n */\nfunction getVelocity(deltaTime, x, y) {\n    return {\n        x: x / deltaTime || 0,\n        y: y / deltaTime || 0\n    };\n}\n\n/**\n * get the direction between two points\n * @param {Number} x\n * @param {Number} y\n * @return {Number} direction\n */\nfunction getDirection(x, y) {\n    if (x === y) {\n        return DIRECTION_NONE;\n    }\n\n    if (abs(x) >= abs(y)) {\n        return x < 0 ? DIRECTION_LEFT : DIRECTION_RIGHT;\n    }\n    return y < 0 ? DIRECTION_UP : DIRECTION_DOWN;\n}\n\n/**\n * calculate the absolute distance between two points\n * @param {Object} p1 {x, y}\n * @param {Object} p2 {x, y}\n * @param {Array} [props] containing x and y keys\n * @return {Number} distance\n */\nfunction getDistance(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n\n    return Math.sqrt((x * x) + (y * y));\n}\n\n/**\n * calculate the angle between two coordinates\n * @param {Object} p1\n * @param {Object} p2\n * @param {Array} [props] containing x and y keys\n * @return {Number} angle\n */\nfunction getAngle(p1, p2, props) {\n    if (!props) {\n        props = PROPS_XY;\n    }\n    var x = p2[props[0]] - p1[props[0]],\n        y = p2[props[1]] - p1[props[1]];\n    return Math.atan2(y, x) * 180 / Math.PI;\n}\n\n/**\n * calculate the rotation degrees between two pointersets\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} rotation\n */\nfunction getRotation(start, end) {\n    return getAngle(end[1], end[0], PROPS_CLIENT_XY) + getAngle(start[1], start[0], PROPS_CLIENT_XY);\n}\n\n/**\n * calculate the scale factor between two pointersets\n * no scale is 1, and goes down to 0 when pinched together, and bigger when pinched out\n * @param {Array} start array of pointers\n * @param {Array} end array of pointers\n * @return {Number} scale\n */\nfunction getScale(start, end) {\n    return getDistance(end[0], end[1], PROPS_CLIENT_XY) / getDistance(start[0], start[1], PROPS_CLIENT_XY);\n}\n\nvar MOUSE_INPUT_MAP = {\n    mousedown: INPUT_START,\n    mousemove: INPUT_MOVE,\n    mouseup: INPUT_END\n};\n\nvar MOUSE_ELEMENT_EVENTS = 'mousedown';\nvar MOUSE_WINDOW_EVENTS = 'mousemove mouseup';\n\n/**\n * Mouse events input\n * @constructor\n * @extends Input\n */\nfunction MouseInput() {\n    this.evEl = MOUSE_ELEMENT_EVENTS;\n    this.evWin = MOUSE_WINDOW_EVENTS;\n\n    this.pressed = false; // mousedown state\n\n    Input.apply(this, arguments);\n}\n\ninherit(MouseInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function MEhandler(ev) {\n        var eventType = MOUSE_INPUT_MAP[ev.type];\n\n        // on start we want to have the left mouse button down\n        if (eventType & INPUT_START && ev.button === 0) {\n            this.pressed = true;\n        }\n\n        if (eventType & INPUT_MOVE && ev.which !== 1) {\n            eventType = INPUT_END;\n        }\n\n        // mouse must be down\n        if (!this.pressed) {\n            return;\n        }\n\n        if (eventType & INPUT_END) {\n            this.pressed = false;\n        }\n\n        this.callback(this.manager, eventType, {\n            pointers: [ev],\n            changedPointers: [ev],\n            pointerType: INPUT_TYPE_MOUSE,\n            srcEvent: ev\n        });\n    }\n});\n\nvar POINTER_INPUT_MAP = {\n    pointerdown: INPUT_START,\n    pointermove: INPUT_MOVE,\n    pointerup: INPUT_END,\n    pointercancel: INPUT_CANCEL,\n    pointerout: INPUT_CANCEL\n};\n\n// in IE10 the pointer types is defined as an enum\nvar IE10_POINTER_TYPE_ENUM = {\n    2: INPUT_TYPE_TOUCH,\n    3: INPUT_TYPE_PEN,\n    4: INPUT_TYPE_MOUSE,\n    5: INPUT_TYPE_KINECT // see https://twitter.com/jacobrossi/status/480596438489890816\n};\n\nvar POINTER_ELEMENT_EVENTS = 'pointerdown';\nvar POINTER_WINDOW_EVENTS = 'pointermove pointerup pointercancel';\n\n// IE10 has prefixed support, and case-sensitive\nif (window.MSPointerEvent && !window.PointerEvent) {\n    POINTER_ELEMENT_EVENTS = 'MSPointerDown';\n    POINTER_WINDOW_EVENTS = 'MSPointerMove MSPointerUp MSPointerCancel';\n}\n\n/**\n * Pointer events input\n * @constructor\n * @extends Input\n */\nfunction PointerEventInput() {\n    this.evEl = POINTER_ELEMENT_EVENTS;\n    this.evWin = POINTER_WINDOW_EVENTS;\n\n    Input.apply(this, arguments);\n\n    this.store = (this.manager.session.pointerEvents = []);\n}\n\ninherit(PointerEventInput, Input, {\n    /**\n     * handle mouse events\n     * @param {Object} ev\n     */\n    handler: function PEhandler(ev) {\n        var store = this.store;\n        var removePointer = false;\n\n        var eventTypeNormalized = ev.type.toLowerCase().replace('ms', '');\n        var eventType = POINTER_INPUT_MAP[eventTypeNormalized];\n        var pointerType = IE10_POINTER_TYPE_ENUM[ev.pointerType] || ev.pointerType;\n\n        var isTouch = (pointerType == INPUT_TYPE_TOUCH);\n\n        // get index of the event in the store\n        var storeIndex = inArray(store, ev.pointerId, 'pointerId');\n\n        // start and mouse must be down\n        if (eventType & INPUT_START && (ev.button === 0 || isTouch)) {\n            if (storeIndex < 0) {\n                store.push(ev);\n                storeIndex = store.length - 1;\n            }\n        } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n            removePointer = true;\n        }\n\n        // it not found, so the pointer hasn't been down (so it's probably a hover)\n        if (storeIndex < 0) {\n            return;\n        }\n\n        // update the event in the store\n        store[storeIndex] = ev;\n\n        this.callback(this.manager, eventType, {\n            pointers: store,\n            changedPointers: [ev],\n            pointerType: pointerType,\n            srcEvent: ev\n        });\n\n        if (removePointer) {\n            // remove from the store\n            store.splice(storeIndex, 1);\n        }\n    }\n});\n\nvar SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n\nvar TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n\n/**\n * Combined touch and mouse input\n *\n * Touch has a higher priority then mouse, and while touching no mouse events are allowed.\n * This because touch devices also emit mouse events while doing a touch.\n *\n * @constructor\n * @extends Input\n */\n\nvar DEDUP_TIMEOUT = 2500;\nvar DEDUP_DISTANCE = 25;\n\nfunction TouchMouseInput() {\n    Input.apply(this, arguments);\n\n    var handler = bindFn(this.handler, this);\n    this.touch = new TouchInput(this.manager, handler);\n    this.mouse = new MouseInput(this.manager, handler);\n\n    this.primaryTouch = null;\n    this.lastTouches = [];\n}\n\ninherit(TouchMouseInput, Input, {\n    /**\n     * handle mouse and touch events\n     * @param {Hammer} manager\n     * @param {String} inputEvent\n     * @param {Object} inputData\n     */\n    handler: function TMEhandler(manager, inputEvent, inputData) {\n        var isTouch = (inputData.pointerType == INPUT_TYPE_TOUCH),\n            isMouse = (inputData.pointerType == INPUT_TYPE_MOUSE);\n\n        if (isMouse && inputData.sourceCapabilities && inputData.sourceCapabilities.firesTouchEvents) {\n            return;\n        }\n\n        // when we're in a touch event, record touches to  de-dupe synthetic mouse event\n        if (isTouch) {\n            recordTouches.call(this, inputEvent, inputData);\n        } else if (isMouse && isSyntheticEvent.call(this, inputData)) {\n            return;\n        }\n\n        this.callback(manager, inputEvent, inputData);\n    },\n\n    /**\n     * remove the event listeners\n     */\n    destroy: function destroy() {\n        this.touch.destroy();\n        this.mouse.destroy();\n    }\n});\n\nfunction recordTouches(eventType, eventData) {\n    if (eventType & INPUT_START) {\n        this.primaryTouch = eventData.changedPointers[0].identifier;\n        setLastTouch.call(this, eventData);\n    } else if (eventType & (INPUT_END | INPUT_CANCEL)) {\n        setLastTouch.call(this, eventData);\n    }\n}\n\nfunction setLastTouch(eventData) {\n    var touch = eventData.changedPointers[0];\n\n    if (touch.identifier === this.primaryTouch) {\n        var lastTouch = {x: touch.clientX, y: touch.clientY};\n        this.lastTouches.push(lastTouch);\n        var lts = this.lastTouches;\n        var removeLastTouch = function() {\n            var i = lts.indexOf(lastTouch);\n            if (i > -1) {\n                lts.splice(i, 1);\n            }\n        };\n        setTimeout(removeLastTouch, DEDUP_TIMEOUT);\n    }\n}\n\nfunction isSyntheticEvent(eventData) {\n    var x = eventData.srcEvent.clientX, y = eventData.srcEvent.clientY;\n    for (var i = 0; i < this.lastTouches.length; i++) {\n        var t = this.lastTouches[i];\n        var dx = Math.abs(x - t.x), dy = Math.abs(y - t.y);\n        if (dx <= DEDUP_DISTANCE && dy <= DEDUP_DISTANCE) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar PREFIXED_TOUCH_ACTION = prefixed(TEST_ELEMENT.style, 'touchAction');\nvar NATIVE_TOUCH_ACTION = PREFIXED_TOUCH_ACTION !== undefined;\n\n// magical touchAction value\nvar TOUCH_ACTION_COMPUTE = 'compute';\nvar TOUCH_ACTION_AUTO = 'auto';\nvar TOUCH_ACTION_MANIPULATION = 'manipulation'; // not implemented\nvar TOUCH_ACTION_NONE = 'none';\nvar TOUCH_ACTION_PAN_X = 'pan-x';\nvar TOUCH_ACTION_PAN_Y = 'pan-y';\nvar TOUCH_ACTION_MAP = getTouchActionProps();\n\n/**\n * Touch Action\n * sets the touchAction property or uses the js alternative\n * @param {Manager} manager\n * @param {String} value\n * @constructor\n */\nfunction TouchAction(manager, value) {\n    this.manager = manager;\n    this.set(value);\n}\n\nTouchAction.prototype = {\n    /**\n     * set the touchAction value on the element or enable the polyfill\n     * @param {String} value\n     */\n    set: function(value) {\n        // find out the touch-action by the event handlers\n        if (value == TOUCH_ACTION_COMPUTE) {\n            value = this.compute();\n        }\n\n        if (NATIVE_TOUCH_ACTION && this.manager.element.style && TOUCH_ACTION_MAP[value]) {\n            this.manager.element.style[PREFIXED_TOUCH_ACTION] = value;\n        }\n        this.actions = value.toLowerCase().trim();\n    },\n\n    /**\n     * just re-set the touchAction value\n     */\n    update: function() {\n        this.set(this.manager.options.touchAction);\n    },\n\n    /**\n     * compute the value for the touchAction property based on the recognizer's settings\n     * @returns {String} value\n     */\n    compute: function() {\n        var actions = [];\n        each(this.manager.recognizers, function(recognizer) {\n            if (boolOrFn(recognizer.options.enable, [recognizer])) {\n                actions = actions.concat(recognizer.getTouchAction());\n            }\n        });\n        return cleanTouchActions(actions.join(' '));\n    },\n\n    /**\n     * this method is called on each input cycle and provides the preventing of the browser behavior\n     * @param {Object} input\n     */\n    preventDefaults: function(input) {\n        var srcEvent = input.srcEvent;\n        var direction = input.offsetDirection;\n\n        // if the touch action did prevented once this session\n        if (this.manager.session.prevented) {\n            srcEvent.preventDefault();\n            return;\n        }\n\n        var actions = this.actions;\n        var hasNone = inStr(actions, TOUCH_ACTION_NONE) && !TOUCH_ACTION_MAP[TOUCH_ACTION_NONE];\n        var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_Y];\n        var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X) && !TOUCH_ACTION_MAP[TOUCH_ACTION_PAN_X];\n\n        if (hasNone) {\n            //do not prevent defaults if this is a tap gesture\n\n            var isTapPointer = input.pointers.length === 1;\n            var isTapMovement = input.distance < 2;\n            var isTapTouchTime = input.deltaTime < 250;\n\n            if (isTapPointer && isTapMovement && isTapTouchTime) {\n                return;\n            }\n        }\n\n        if (hasPanX && hasPanY) {\n            // `pan-x pan-y` means browser handles all scrolling/panning, do not prevent\n            return;\n        }\n\n        if (hasNone ||\n            (hasPanY && direction & DIRECTION_HORIZONTAL) ||\n            (hasPanX && direction & DIRECTION_VERTICAL)) {\n            return this.preventSrc(srcEvent);\n        }\n    },\n\n    /**\n     * call preventDefault to prevent the browser's default behavior (scrolling in most cases)\n     * @param {Object} srcEvent\n     */\n    preventSrc: function(srcEvent) {\n        this.manager.session.prevented = true;\n        srcEvent.preventDefault();\n    }\n};\n\n/**\n * when the touchActions are collected they are not a valid value, so we need to clean things up. *\n * @param {String} actions\n * @returns {*}\n */\nfunction cleanTouchActions(actions) {\n    // none\n    if (inStr(actions, TOUCH_ACTION_NONE)) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    var hasPanX = inStr(actions, TOUCH_ACTION_PAN_X);\n    var hasPanY = inStr(actions, TOUCH_ACTION_PAN_Y);\n\n    // if both pan-x and pan-y are set (different recognizers\n    // for different directions, e.g. horizontal pan but vertical swipe?)\n    // we need none (as otherwise with pan-x pan-y combined none of these\n    // recognizers will work, since the browser would handle all panning\n    if (hasPanX && hasPanY) {\n        return TOUCH_ACTION_NONE;\n    }\n\n    // pan-x OR pan-y\n    if (hasPanX || hasPanY) {\n        return hasPanX ? TOUCH_ACTION_PAN_X : TOUCH_ACTION_PAN_Y;\n    }\n\n    // manipulation\n    if (inStr(actions, TOUCH_ACTION_MANIPULATION)) {\n        return TOUCH_ACTION_MANIPULATION;\n    }\n\n    return TOUCH_ACTION_AUTO;\n}\n\nfunction getTouchActionProps() {\n    if (!NATIVE_TOUCH_ACTION) {\n        return false;\n    }\n    var touchMap = {};\n    var cssSupports = window.CSS && window.CSS.supports;\n    ['auto', 'manipulation', 'pan-y', 'pan-x', 'pan-x pan-y', 'none'].forEach(function(val) {\n\n        // If css.supports is not supported but there is native touch-action assume it supports\n        // all values. This is the case for IE 10 and 11.\n        touchMap[val] = cssSupports ? window.CSS.supports('touch-action', val) : true;\n    });\n    return touchMap;\n}\n\n/**\n * Recognizer flow explained; *\n * All recognizers have the initial state of POSSIBLE when a input session starts.\n * The definition of a input session is from the first input until the last input, with all it's movement in it. *\n * Example session for mouse-input: mousedown -> mousemove -> mouseup\n *\n * On each recognizing cycle (see Manager.recognize) the .recognize() method is executed\n * which determines with state it should be.\n *\n * If the recognizer has the state FAILED, CANCELLED or RECOGNIZED (equals ENDED), it is reset to\n * POSSIBLE to give it another change on the next cycle.\n *\n *               Possible\n *                  |\n *            +-----+---------------+\n *            |                     |\n *      +-----+-----+               |\n *      |           |               |\n *   Failed      Cancelled          |\n *                          +-------+------+\n *                          |              |\n *                      Recognized       Began\n *                                         |\n *                                      Changed\n *                                         |\n *                                  Ended/Recognized\n */\nvar STATE_POSSIBLE = 1;\nvar STATE_BEGAN = 2;\nvar STATE_CHANGED = 4;\nvar STATE_ENDED = 8;\nvar STATE_RECOGNIZED = STATE_ENDED;\nvar STATE_CANCELLED = 16;\nvar STATE_FAILED = 32;\n\n/**\n * Recognizer\n * Every recognizer needs to extend from this class.\n * @constructor\n * @param {Object} options\n */\nfunction Recognizer(options) {\n    this.options = assign({}, this.defaults, options || {});\n\n    this.id = uniqueId();\n\n    this.manager = null;\n\n    // default is enable true\n    this.options.enable = ifUndefined(this.options.enable, true);\n\n    this.state = STATE_POSSIBLE;\n\n    this.simultaneous = {};\n    this.requireFail = [];\n}\n\nRecognizer.prototype = {\n    /**\n     * @virtual\n     * @type {Object}\n     */\n    defaults: {},\n\n    /**\n     * set options\n     * @param {Object} options\n     * @return {Recognizer}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // also update the touchAction, in case something changed about the directions/enabled state\n        this.manager && this.manager.touchAction.update();\n        return this;\n    },\n\n    /**\n     * recognize simultaneous with an other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    recognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'recognizeWith', this)) {\n            return this;\n        }\n\n        var simultaneous = this.simultaneous;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (!simultaneous[otherRecognizer.id]) {\n            simultaneous[otherRecognizer.id] = otherRecognizer;\n            otherRecognizer.recognizeWith(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the simultaneous link. it doesnt remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRecognizeWith: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRecognizeWith', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        delete this.simultaneous[otherRecognizer.id];\n        return this;\n    },\n\n    /**\n     * recognizer can only run when an other is failing\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    requireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'requireFailure', this)) {\n            return this;\n        }\n\n        var requireFail = this.requireFail;\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        if (inArray(requireFail, otherRecognizer) === -1) {\n            requireFail.push(otherRecognizer);\n            otherRecognizer.requireFailure(this);\n        }\n        return this;\n    },\n\n    /**\n     * drop the requireFailure link. it does not remove the link on the other recognizer.\n     * @param {Recognizer} otherRecognizer\n     * @returns {Recognizer} this\n     */\n    dropRequireFailure: function(otherRecognizer) {\n        if (invokeArrayArg(otherRecognizer, 'dropRequireFailure', this)) {\n            return this;\n        }\n\n        otherRecognizer = getRecognizerByNameIfManager(otherRecognizer, this);\n        var index = inArray(this.requireFail, otherRecognizer);\n        if (index > -1) {\n            this.requireFail.splice(index, 1);\n        }\n        return this;\n    },\n\n    /**\n     * has require failures boolean\n     * @returns {boolean}\n     */\n    hasRequireFailures: function() {\n        return this.requireFail.length > 0;\n    },\n\n    /**\n     * if the recognizer can recognize simultaneous with an other recognizer\n     * @param {Recognizer} otherRecognizer\n     * @returns {Boolean}\n     */\n    canRecognizeWith: function(otherRecognizer) {\n        return !!this.simultaneous[otherRecognizer.id];\n    },\n\n    /**\n     * You should use `tryEmit` instead of `emit` directly to check\n     * that all the needed recognizers has failed before emitting.\n     * @param {Object} input\n     */\n    emit: function(input) {\n        var self = this;\n        var state = this.state;\n\n        function emit(event) {\n            self.manager.emit(event, input);\n        }\n\n        // 'panstart' and 'panmove'\n        if (state < STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n\n        emit(self.options.event); // simple 'eventName' events\n\n        if (input.additionalEvent) { // additional event(panleft, panright, pinchin, pinchout...)\n            emit(input.additionalEvent);\n        }\n\n        // panend and pancancel\n        if (state >= STATE_ENDED) {\n            emit(self.options.event + stateStr(state));\n        }\n    },\n\n    /**\n     * Check that all the require failure recognizers has failed,\n     * if true, it emits a gesture event,\n     * otherwise, setup the state to FAILED.\n     * @param {Object} input\n     */\n    tryEmit: function(input) {\n        if (this.canEmit()) {\n            return this.emit(input);\n        }\n        // it's failing anyway\n        this.state = STATE_FAILED;\n    },\n\n    /**\n     * can we emit?\n     * @returns {boolean}\n     */\n    canEmit: function() {\n        var i = 0;\n        while (i < this.requireFail.length) {\n            if (!(this.requireFail[i].state & (STATE_FAILED | STATE_POSSIBLE))) {\n                return false;\n            }\n            i++;\n        }\n        return true;\n    },\n\n    /**\n     * update the recognizer\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        // make a new copy of the inputData\n        // so we can change the inputData without messing up the other recognizers\n        var inputDataClone = assign({}, inputData);\n\n        // is is enabled and allow recognizing?\n        if (!boolOrFn(this.options.enable, [this, inputDataClone])) {\n            this.reset();\n            this.state = STATE_FAILED;\n            return;\n        }\n\n        // reset when we've reached the end\n        if (this.state & (STATE_RECOGNIZED | STATE_CANCELLED | STATE_FAILED)) {\n            this.state = STATE_POSSIBLE;\n        }\n\n        this.state = this.process(inputDataClone);\n\n        // the recognizer has recognized a gesture\n        // so trigger an event\n        if (this.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED | STATE_CANCELLED)) {\n            this.tryEmit(inputDataClone);\n        }\n    },\n\n    /**\n     * return the state of the recognizer\n     * the actual recognizing happens in this method\n     * @virtual\n     * @param {Object} inputData\n     * @returns {Const} STATE\n     */\n    process: function(inputData) { }, // jshint ignore:line\n\n    /**\n     * return the preferred touch-action\n     * @virtual\n     * @returns {Array}\n     */\n    getTouchAction: function() { },\n\n    /**\n     * called when the gesture isn't allowed to recognize\n     * like when another is being recognized or it is disabled\n     * @virtual\n     */\n    reset: function() { }\n};\n\n/**\n * get a usable string, used as event postfix\n * @param {Const} state\n * @returns {String} state\n */\nfunction stateStr(state) {\n    if (state & STATE_CANCELLED) {\n        return 'cancel';\n    } else if (state & STATE_ENDED) {\n        return 'end';\n    } else if (state & STATE_CHANGED) {\n        return 'move';\n    } else if (state & STATE_BEGAN) {\n        return 'start';\n    }\n    return '';\n}\n\n/**\n * direction cons to string\n * @param {Const} direction\n * @returns {String}\n */\nfunction directionStr(direction) {\n    if (direction == DIRECTION_DOWN) {\n        return 'down';\n    } else if (direction == DIRECTION_UP) {\n        return 'up';\n    } else if (direction == DIRECTION_LEFT) {\n        return 'left';\n    } else if (direction == DIRECTION_RIGHT) {\n        return 'right';\n    }\n    return '';\n}\n\n/**\n * get a recognizer by name if it is bound to a manager\n * @param {Recognizer|String} otherRecognizer\n * @param {Recognizer} recognizer\n * @returns {Recognizer}\n */\nfunction getRecognizerByNameIfManager(otherRecognizer, recognizer) {\n    var manager = recognizer.manager;\n    if (manager) {\n        return manager.get(otherRecognizer);\n    }\n    return otherRecognizer;\n}\n\n/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n\n/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Pinch\n * Recognized when two or more pointers are moving toward (zoom-in) or away from each other (zoom-out).\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PinchRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(PinchRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'pinch',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.scale - 1) > this.options.threshold || this.state & STATE_BEGAN);\n    },\n\n    emit: function(input) {\n        if (input.scale !== 1) {\n            var inOut = input.scale < 1 ? 'in' : 'out';\n            input.additionalEvent = this.options.event + inOut;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n\n/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n\n/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n\n/**\n * A tap is ecognized when the pointer is doing a small tap/click. Multiple taps are recognized if they occur\n * between the given interval and position. The delay option can be used to recognize multi-taps without firing\n * a single tap.\n *\n * The eventData from the emitted event contains the property `tapCount`, which contains the amount of\n * multi-taps being recognized.\n * @constructor\n * @extends Recognizer\n */\nfunction TapRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    // previous time and center,\n    // used for tap counting\n    this.pTime = false;\n    this.pCenter = false;\n\n    this._timer = null;\n    this._input = null;\n    this.count = 0;\n}\n\ninherit(TapRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PinchRecognizer\n     */\n    defaults: {\n        event: 'tap',\n        pointers: 1,\n        taps: 1,\n        interval: 300, // max time between the multi-tap taps\n        time: 250, // max time of the pointer to be down (like finger on the screen)\n        threshold: 9, // a minimal movement is ok, but keep it low\n        posThreshold: 10 // a multi-tap can be a bit off the initial position\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_MANIPULATION];\n    },\n\n    process: function(input) {\n        var options = this.options;\n\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTouchTime = input.deltaTime < options.time;\n\n        this.reset();\n\n        if ((input.eventType & INPUT_START) && (this.count === 0)) {\n            return this.failTimeout();\n        }\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (validMovement && validTouchTime && validPointers) {\n            if (input.eventType != INPUT_END) {\n                return this.failTimeout();\n            }\n\n            var validInterval = this.pTime ? (input.timeStamp - this.pTime < options.interval) : true;\n            var validMultiTap = !this.pCenter || getDistance(this.pCenter, input.center) < options.posThreshold;\n\n            this.pTime = input.timeStamp;\n            this.pCenter = input.center;\n\n            if (!validMultiTap || !validInterval) {\n                this.count = 1;\n            } else {\n                this.count += 1;\n            }\n\n            this._input = input;\n\n            // if tap count matches we have recognized it,\n            // else it has began recognizing...\n            var tapCount = this.count % options.taps;\n            if (tapCount === 0) {\n                // no failing requirements, immediately trigger the tap event\n                // or wait as long as the multitap interval to trigger\n                if (!this.hasRequireFailures()) {\n                    return STATE_RECOGNIZED;\n                } else {\n                    this._timer = setTimeoutContext(function() {\n                        this.state = STATE_RECOGNIZED;\n                        this.tryEmit();\n                    }, options.interval, this);\n                    return STATE_BEGAN;\n                }\n            }\n        }\n        return STATE_FAILED;\n    },\n\n    failTimeout: function() {\n        this._timer = setTimeoutContext(function() {\n            this.state = STATE_FAILED;\n        }, this.options.interval, this);\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function() {\n        if (this.state == STATE_RECOGNIZED) {\n            this._input.tapCount = this.count;\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n\n/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '2.0.7';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n\nvar STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n\nassign(Hammer, {\n    INPUT_START: INPUT_START,\n    INPUT_MOVE: INPUT_MOVE,\n    INPUT_END: INPUT_END,\n    INPUT_CANCEL: INPUT_CANCEL,\n\n    STATE_POSSIBLE: STATE_POSSIBLE,\n    STATE_BEGAN: STATE_BEGAN,\n    STATE_CHANGED: STATE_CHANGED,\n    STATE_ENDED: STATE_ENDED,\n    STATE_RECOGNIZED: STATE_RECOGNIZED,\n    STATE_CANCELLED: STATE_CANCELLED,\n    STATE_FAILED: STATE_FAILED,\n\n    DIRECTION_NONE: DIRECTION_NONE,\n    DIRECTION_LEFT: DIRECTION_LEFT,\n    DIRECTION_RIGHT: DIRECTION_RIGHT,\n    DIRECTION_UP: DIRECTION_UP,\n    DIRECTION_DOWN: DIRECTION_DOWN,\n    DIRECTION_HORIZONTAL: DIRECTION_HORIZONTAL,\n    DIRECTION_VERTICAL: DIRECTION_VERTICAL,\n    DIRECTION_ALL: DIRECTION_ALL,\n\n    Manager: Manager,\n    Input: Input,\n    TouchAction: TouchAction,\n\n    TouchInput: TouchInput,\n    MouseInput: MouseInput,\n    PointerEventInput: PointerEventInput,\n    TouchMouseInput: TouchMouseInput,\n    SingleTouchInput: SingleTouchInput,\n\n    Recognizer: Recognizer,\n    AttrRecognizer: AttrRecognizer,\n    Tap: TapRecognizer,\n    Pan: PanRecognizer,\n    Swipe: SwipeRecognizer,\n    Pinch: PinchRecognizer,\n    Rotate: RotateRecognizer,\n    Press: PressRecognizer,\n\n    on: addEventListeners,\n    off: removeEventListeners,\n    each: each,\n    merge: merge,\n    extend: extend,\n    assign: assign,\n    inherit: inherit,\n    bindFn: bindFn,\n    prefixed: prefixed\n});\n\n// this prevents errors when Hammer is loaded in the presence of an AMD\n//  style loader but by script tag, not by the loader.\nvar freeGlobal = (typeof window !== 'undefined' ? window : (typeof self !== 'undefined' ? self : {})); // jshint ignore:line\nfreeGlobal.Hammer = Hammer;\n\nif (typeof define === 'function' && define.amd) {\n    define(function() {\n        return Hammer;\n    });\n} else if (typeof module != 'undefined' && module.exports) {\n    module.exports = Hammer;\n} else {\n    window[exportName] = Hammer;\n}\n\n})(window, document, 'Hammer');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/hammerjs/hammer.js\n// module id = 362\n// module chunks = 6","\n/* styles */\nrequire(\"!!../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader!../../node_modules/vue-loader/lib/style-rewriter?{\\\"id\\\":\\\"data-v-4a359ab8\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!sass-loader!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./cart-item.vue\")\n\nvar Component = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./cart-item.vue\"),\n  /* template */\n  require(\"!!../../node_modules/vue-loader/lib/template-compiler?{\\\"id\\\":\\\"data-v-4a359ab8\\\"}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./cart-item.vue\"),\n  /* scopeId */\n  \"data-v-4a359ab8\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/cart-item.vue\n// module id = 363\n// module chunks = 6","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"shopping-cart\"\n  }, [_c('transition-group', {\n    attrs: {\n      \"name\": \"cart\",\n      \"tag\": \"div\"\n    }\n  }, _vm._l((_vm.cart), function(item) {\n    return _c('div', {\n      key: item.id,\n      staticClass: \"mart-group\",\n      class: {\n        editing: _vm.editing && _vm.editIndex == item.id\n      },\n      attrs: {\n        \"index\": item.id\n      }\n    }, [_c('div', {\n      staticClass: \"item\"\n    }, [_c('div', {\n      staticClass: \"choose\"\n    }, [_c('a', {\n      attrs: {\n        \"href\": \"javascript:void(0);\"\n      },\n      on: {\n        \"click\": function($event) {\n          _vm.choose(item)\n        }\n      }\n    }, [_c('img', {\n      directives: [{\n        name: \"show\",\n        rawName: \"v-show\",\n        value: (item.chosen),\n        expression: \"item.chosen\"\n      }],\n      attrs: {\n        \"src\": \"src/img/chosen.png\",\n        \"alt\": \"\",\n        \"width\": \"100%\"\n      }\n    }), _vm._v(\" \"), _c('img', {\n      directives: [{\n        name: \"show\",\n        rawName: \"v-show\",\n        value: (!item.chosen),\n        expression: \"!item.chosen\"\n      }],\n      attrs: {\n        \"src\": \"src/img/not-choose.png\",\n        \"alt\": \"\",\n        \"width\": \"100%\"\n      }\n    })])]), _vm._v(\" \"), _c('div', {\n      staticClass: \"img\"\n    }, [_c('img', {\n      attrs: {\n        \"src\": \"src/img/home-sellings-1.jpg\",\n        \"alt\": \"\",\n        \"width\": \"100%\"\n      }\n    })]), _vm._v(\" \"), _c('div', {\n      staticClass: \"infos\"\n    }, [_c('p', [_vm._v(_vm._s(item.englishname))]), _vm._v(\" \"), _c('p', [_vm._v(_vm._s(item.proname))]), _vm._v(\" \"), _c('p', {\n      staticClass: \"spe\"\n    }, [_vm._v(_vm._s(item.procontent) + \"ml\")]), _vm._v(\" \"), _c('div', {\n      staticClass: \"group\"\n    }, [_c('a', {\n      class: {\n        disable: item.count == 1\n      },\n      attrs: {\n        \"href\": \"javascript:void(0);\"\n      },\n      on: {\n        \"click\": function($event) {\n          _vm.count('-', item)\n        }\n      }\n    }, [_vm._v(\"\\n                            －\\n                        \")]), _vm._v(\" \"), _c('span', [_vm._v(_vm._s(item.count))]), _vm._v(\" \"), _c('a', {\n      attrs: {\n        \"href\": \"javascript:void(0);\"\n      },\n      on: {\n        \"click\": function($event) {\n          _vm.count('+', item)\n        }\n      }\n    }, [_vm._v(\"\\n                            ＋\\n                        \")])])]), _vm._v(\" \"), _c('div', {\n      staticClass: \"price\"\n    }, [_vm._v(\"\\n                    \" + _vm._s(_vm._f(\"currency\")(item.proprice * item.count, '￥', 0)) + \"\\n                \")])]), _vm._v(\" \"), _c('a', {\n      staticClass: \"delete\",\n      attrs: {\n        \"href\": \"javascript:void(0);\"\n      },\n      on: {\n        \"click\": function($event) {\n          _vm.deleteItem(item)\n        }\n      }\n    }, [_vm._v(\"删除\")])])\n  }))], 1)\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler.js?{\"id\":\"data-v-4a359ab8\"}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/cart-item.vue\n// module id = 377\n// module chunks = 6","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"wrapper\"\n  }, [_c('div', {\n    staticClass: \"out-container\"\n  }, [_c('div', {\n    staticClass: \"main-container cart-page\"\n  }, [_c('transition', {\n    attrs: {\n      \"name\": \"cart-turn\",\n      \"mode\": \"out-in\"\n    }\n  }, [(_vm.cart.length) ? _c('cart-item', {\n    key: \"full\",\n    attrs: {\n      \"cart\": _vm.cart\n    }\n  }) : _c('div', {\n    key: \"empty\",\n    staticClass: \"empty-cart\"\n  }, [_c('div', [_c('img', {\n    attrs: {\n      \"src\": \"src/img/empty-cart.jpg\",\n      \"alt\": \"\"\n    }\n  })])])], 1), _vm._v(\" \"), _c('div', {\n    staticClass: \"like\"\n  }, [_c('h3', {\n    staticClass: \"with-after\"\n  }, [_vm._v(\"猜你喜欢\")]), _vm._v(\" \"), _c('ul', [_c('li-item', {\n    attrs: {\n      \"item\": {}\n    }\n  }), _vm._v(\" \"), _c('li-item', {\n    attrs: {\n      \"item\": {}\n    }\n  }), _vm._v(\" \"), _c('li-item', {\n    attrs: {\n      \"item\": {}\n    }\n  }), _vm._v(\" \"), _c('li-item', {\n    attrs: {\n      \"item\": {}\n    }\n  })], 1)]), _vm._v(\" \"), _c('div', {\n    staticClass: \"foot-bar\"\n  }, [_c('a', {\n    staticClass: \"choose-all\",\n    attrs: {\n      \"href\": \"javascript:void(0);\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.chooseAll()\n      }\n    }\n  }, [_c('img', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (_vm.allChosen),\n      expression: \"allChosen\"\n    }],\n    attrs: {\n      \"src\": \"src/img/chosen.png\",\n      \"alt\": \"\"\n    }\n  }), _vm._v(\" \"), _c('img', {\n    directives: [{\n      name: \"show\",\n      rawName: \"v-show\",\n      value: (!_vm.allChosen),\n      expression: \"!allChosen\"\n    }],\n    attrs: {\n      \"src\": \"src/img/not-choose.png\",\n      \"alt\": \"\"\n    }\n  }), _vm._v(\"\\n                    全选\\n                \")]), _vm._v(\" \"), _c('div', [_c('span', [_vm._v(\"合计：￥\" + _vm._s(_vm.theMoney))]), _vm._v(\" \"), _c('a', {\n    attrs: {\n      \"href\": \"javascript:;\"\n    },\n    on: {\n      \"click\": function($event) {\n        _vm.toSettle()\n      }\n    }\n  }, [_vm._v(\"去结算\")])])])], 1)])])\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler.js?{\"id\":\"data-v-dbc56688\"}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/pages/Cart.vue\n// module id = 385\n// module chunks = 6"],"sourceRoot":""}